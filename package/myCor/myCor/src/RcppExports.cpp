// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
#define ARMA_USE_OPENMP
#define ARMA_USE_BLAS
#define ARMA_ALLOW_FAKE_GCC
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace arma;
using namespace Rcpp;
using std::string;
using namespace std;
static double const log2pi = std::log(2.0 * M_PI);
const double pi = 3.141592653589793238463 ;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mycor
sp_mat mycor(const mat MAT_CORR, const rowvec cf, int const t, const string cor, double const nug, double const alpha, double const nu);
RcppExport SEXP _myCor_mycor(SEXP MAT_CORRSEXP, SEXP cfSEXP, SEXP tSEXP, SEXP corSEXP, SEXP nugSEXP, SEXP alphaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat >::type MAT_CORR(MAT_CORRSEXP);
    Rcpp::traits::input_parameter< const rowvec >::type cf(cfSEXP);
    Rcpp::traits::input_parameter< int const >::type t(tSEXP);
    Rcpp::traits::input_parameter< const string >::type cor(corSEXP);
    Rcpp::traits::input_parameter< double const >::type nug(nugSEXP);
    Rcpp::traits::input_parameter< double const >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double const >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mycor(MAT_CORR, cf, t, cor, nug, alpha, nu));
    return rcpp_result_gen;
END_RCPP
}
// mycor2
List mycor2(const mat XX, int const n, int const n0, const rowvec cf, int const t, const string cor, double const nug, double const alpha, double const nu);
RcppExport SEXP _myCor_mycor2(SEXP XXSEXP, SEXP nSEXP, SEXP n0SEXP, SEXP cfSEXP, SEXP tSEXP, SEXP corSEXP, SEXP nugSEXP, SEXP alphaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< int const >::type n(nSEXP);
    Rcpp::traits::input_parameter< int const >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< const rowvec >::type cf(cfSEXP);
    Rcpp::traits::input_parameter< int const >::type t(tSEXP);
    Rcpp::traits::input_parameter< const string >::type cor(corSEXP);
    Rcpp::traits::input_parameter< double const >::type nug(nugSEXP);
    Rcpp::traits::input_parameter< double const >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double const >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mycor2(XX, n, n0, cf, t, cor, nug, alpha, nu));
    return rcpp_result_gen;
END_RCPP
}
// mycor3
sp_mat mycor3(NumericMatrix MAT_CORR, NumericMatrix MAT_CORR2, NumericVector const& cf, int const t, const string cor, double const nug, double const alpha, double const nu);
RcppExport SEXP _myCor_mycor3(SEXP MAT_CORRSEXP, SEXP MAT_CORR2SEXP, SEXP cfSEXP, SEXP tSEXP, SEXP corSEXP, SEXP nugSEXP, SEXP alphaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type MAT_CORR(MAT_CORRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type MAT_CORR2(MAT_CORR2SEXP);
    Rcpp::traits::input_parameter< NumericVector const& >::type cf(cfSEXP);
    Rcpp::traits::input_parameter< int const >::type t(tSEXP);
    Rcpp::traits::input_parameter< const string >::type cor(corSEXP);
    Rcpp::traits::input_parameter< double const >::type nug(nugSEXP);
    Rcpp::traits::input_parameter< double const >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double const >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mycor3(MAT_CORR, MAT_CORR2, cf, t, cor, nug, alpha, nu));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _myCor_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _myCor_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _myCor_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _myCor_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_myCor_mycor", (DL_FUNC) &_myCor_mycor, 7},
    {"_myCor_mycor2", (DL_FUNC) &_myCor_mycor2, 9},
    {"_myCor_mycor3", (DL_FUNC) &_myCor_mycor3, 8},
    {"_myCor_rcpparma_hello_world", (DL_FUNC) &_myCor_rcpparma_hello_world, 0},
    {"_myCor_rcpparma_outerproduct", (DL_FUNC) &_myCor_rcpparma_outerproduct, 1},
    {"_myCor_rcpparma_innerproduct", (DL_FUNC) &_myCor_rcpparma_innerproduct, 1},
    {"_myCor_rcpparma_bothproducts", (DL_FUNC) &_myCor_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_myCor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
